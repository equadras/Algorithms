#include <bits/stdc++.h>

using namespace std;

#ifdef local_debug
#include "debug.h"
#else
#define debug(...)
#endif

#define endl "\n"
typedef long long ll;

const int maxn = 2e5+54;
const int logg = (int) log2(maxn) + 5;

int p[maxn];
int sz[maxn];
vector<pair<int,int>> adj[maxn];

int up[maxn][logg], mx[maxn][logg];
int tin[maxn], tout[maxn], t = 0;

void dfs(int v, int p = 0){
    up[v][0] = p;
    tin[v] = t++;

    for (int i = 1; i < logg; i++){
        up[v][i] = up[up[v][i - 1]][i - 1];
        mx[v][i] = max(mx[v][i - 1], mx[up[v][i - 1]][i - 1]);
    }

    for (auto [u, w] : adj[v]){
        if (u != p){
            mx[u][0] = w;
            dfs(u, v);
        }
    }
    tout[v] = t++;
}

bool anc(int u, int v){  return tin[u] <= tin[v] && tout[u] >= tout[v]; }

int find (int u){ return u == p[u] ? u : p[u] = find(p[u]); }

int unite (int u, int v){
    u = find(v); 
    v = find(v);

    if (!(u - v)) return false;
    if (sz[u] > sz[v]){
        p[v] = u;
        sz[u] += sz[v];
    }
    else {
        p[u] = v;
        sz[v] += sz[u];
    }
    return true;
}

int get (int u, int v){
    int res = 0;
    for (int i = logg; i >= 0; i--){
        debug(i);
        if (anc(up[u][i],v) == true){
            res = max(res,mx[u][i]);
            v = up[v][i];
        }
    }
    return max(res, mx[u][0]);
}

signed main(){
    ios_base::sync_with_stdio(0);cin.tie(0);
    int n, m; cin >> n >> m;
    vector<tuple<int, int, int>> edg;

    for (int i = 0; i < m; i++){
        int u, v, w; cin >> u >> v >> w;
        --u; --v;
        edg.emplace_back(w, u, v);
    }
    sort(edg.begin(), edg.end());


    ll mxp = 0;
    for (int i = 0; i < m; i++){
        auto [w, u, v] = edg[i];
        if (unite(u,v)){
            mxp += w;   
            adj[u].emplace_back(v,w);
            adj[v].emplace_back(u,w);
        }
    }

    dfs(0);

    debug(edg);
    for (auto [w, v, u] : edg){
        ll res = mxp + w - max(get(u,v), get(v,u));
        cout << res << endl;
    }
    return 0;
}



